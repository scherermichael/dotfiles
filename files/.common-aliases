alias .="code ."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias -- -="cd -"

alias a="LANG=en_US.UTF-8 atom --clear-window-state"
alias ade="LANG=de_DE.UTF-8 atom --clear-window-state"

function awscrd {
  if [ -z "$1" ]; then
    # Prettify output and mark current selection with asterisk
    env | grep AWS_ACCESS_KEY_ID_ | sort | sed "s/^AWS_ACCESS_KEY_ID_//" | sed "s/=/ /" | sed -E "s/^(.* ${AWS_ACCESS_KEY_ID})$/* \1/"
  else
    name=$(echo "$1" | tr '[:lower:]' '[:upper:]')
    eval value=\$"AWS_ACCESS_KEY_ID_$name" && export AWS_ACCESS_KEY_ID=$value
    eval value=\$"AWS_SECRET_ACCESS_KEY_$name" && export AWS_SECRET_ACCESS_KEY=$value
    eval value=\$"AWS_DEFAULT_REGION_$name" && export AWS_DEFAULT_REGION=$value
    echo "AWS_ACCESS_KEY_ID set to: $AWS_ACCESS_KEY_ID"
  fi
}

alias c="code"

function copyssh {
  if which clipcopy > /dev/null; then
    # Use clipcopy if running in zsh
    clipcopy < ~/.ssh/id_rsa.pub
  else
    # Use pbcopy as fallback
    "pbcopy < ~/.ssh/id_rsa.pub"
  fi
}

# Docker
alias d="docker"
alias doco="docker compose"
alias dm="docker-machine"
alias doma="docker-machine"
function dme {
  eval "$(docker-machine env $2 $1)"
}
function dmuse {
  if [ "$1" = "mac" ]; then
    # Use Docker for Mac
    unset ${!DOCKER_*}
    echo "Now using Docker for Mac..."
  else
    # Start machine with given name
    doma start "$1"
    dme "$@"
  fi
}
alias dps='docker ps --format="table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"'

alias fls="find . \! -regex '.*/\.git/.*' -type f 2>/dev/null | cut -d/ -f2- | sort --ignore-case | fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"

# Lima
alias l="lima nerdctl"
alias loco="lima nerdctl compose"
alias lstart="limactl start"
alias lstop="limactl stop"
alias lps='lima nerdctl ps --format="{{.ID}} | {{.Names}} | {{.Status}} | {{.Image}}"'

alias g="git"
alias gti="git"
# Show state of all git repositories in a directory
function gitls {
  if [ "$#" -lt 1  ]; then
    dirs="."
  else
    dirs=$*
  fi
  if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      RED=$(tput setaf 1)
      ORANGE=$(tput setaf 172)
      GREEN=$(tput setaf 70)
      PURPLE=$(tput setaf 141)
    else
      GREEN=$(tput setaf 2)
      PURPLE=$(tput setaf 1)

    fi
    RESET=$(tput sgr0)
  else
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    RESET="\033[m"
  fi

  for d in `find $dirs -name ".git"`; do
    # check if we're in a git repo
    git --git-dir=$d --work-tree=$d/.. rev-parse --is-inside-work-tree &>/dev/null # || return

    # quickest check for what branch we're on
    branch=$(git --git-dir=$d --work-tree=$d/.. symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git --git-dir=$d --work-tree=$d/.. diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "*")
    dir=`echo $d | sed -e 's|^\.\/||' -e 's|\/.git||'`
    FOLDER=$GREEN
    BRANCH=$GREEN
    if [ "$branch" != "master" ]; then
      FOLDER=$ORANGE
      BRANCH=$ORANGE
    fi
    if [ "$dirty" = "*" ]; then
      FOLDER=$RED
      BRANCH=$RED
    fi
    echo $RESET$FOLDER"$dir$RESET on "$BRANCH$branch$dirty$RESET
  done
}
alias gls="gitls"
function add {
  git add "$@"
}
function amend {
  git commit --amend -m "$*"
}
function clone {
  local url="$1"
  local rootPath="$2"

  if [ -z "${url}" ]; then
    echo "Error: No source url given."
    echo "Usage $0 <url of repository to clone> [<parent dir of the new local repository>]"
    return 1
  fi

  # No full ssh url provided
  if ! [[ ${url} =~ ":" ]]; then
    # No GitHub org provided
    if ! [[ ${url} =~ "/" ]]; then
      if [ -n "${GITHUB_ORG}" ]; then
        url="${GITHUB_ORG}/${url}"
      else
        echo "Error: Please specify GitHub org in url or set environment variable GITHUB_ORG."
        return 1
      fi
    fi

    url="git@github.com:${url}"
  fi

  local repo=${url##*/}
  repo=${repo#.git} # remove optional trailing extension

  if [ -z "${rootPath}" ]; then
    rootPath="${HOME}/projects" # fallback
    [ -d "${HOME}/git" ] && rootPath="${HOME}/git" # use ~/git if available
  fi

  if [ ! -d "${rootPath}" ]; then
    echo "Error: Target dir ${rootPath} does not exists"
    return 1
  fi

  if [ ! -d "${rootPath}/${repo}" ]; then
    git clone "${url}" "${rootPath}/${repo}"
  fi

  cd "${rootPath}/${repo}"
  git pull

  # Install npm modules if it is a Node project
  if [ -f "${rootPath}/${repo}/package.json" ]; then
    npm install
  fi
}
function commit {
  git commit -m "$*"
}
function merge {
  git merge "$@"
}
function mergemaster {
  branch="$(currbranch)"
  git checkout master && git pull && git checkout "$branch" && git merge --no-edit master
}
alias prunebranches="git branch --merged master | grep -v ' master$' | xargs git branch -d"
alias pull="git pull"
# Print current branch
alias currbranch="git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'"
# Automatically set matching remote branch on first push
function push {
  if git branch -vv | grep '\*' | grep -q '\['; then
    git push
  else
    git push -u origin "$(currbranch)"
  fi
}
alias status="git status"
# Switch to branch and create it if necessary
function switch {
  if git branch -a | grep -q "$1"; then
    git checkout "$1"
  else
    git checkout -b "$1"
  fi
}

alias kc="kubectl"
function kca {
  kubectl "$@" --all-namespaces
}
# Set Kubernetes client to new namespace
function kcns {
  if [ -n "$1" ]; then
    selection="$1"
    if [[ $selection =~ ^[0-9]+$ ]]; then
      # Line number entered, get context from that line
      selection=$(kubectl get ns --no-headers -o custom-columns=NAME:.metadata.name | sed "${selection}q;d")
    fi
    kubectl config set-context --current --namespace="${selection}"
    echo "Current namespace: $(kubectl config view --minify --output 'jsonpath={..namespace}'; echo)"
  else
    kubectl get ns --no-headers -o custom-columns=NAME:.metadata.name | nl -n rn -w 3 -s ' '
    echo ""
    echo "Current namespace: $(kubectl config view --minify --output 'jsonpath={..namespace}'; echo)"
  fi
}
# Set Kubernetes client to new context
function kcctx {
  if [ -n "$1" ]; then
    selection="$1"
    if [[ $selection =~ ^[0-9]+$ ]]; then
      # Line number entered, get context from that line
      selection=$(kubectl config get-contexts -o name --no-headers | sed "${selection}q;d")
    fi
    kubectl config use-context "${selection}"
  else
    kubectl config get-contexts --no-headers | tr -s " " | cut -d " " -f1,2,5 | sed 's/ / | /g' | sed -e 's/^ \| /  | /g' | nl -n rn -w 3 -s ' '
  fi
}

function mkcd {
  mkdir "$1" && cd "$1"
}

alias nr="npm run"
function nrc {
  if [ -z $1 ]; then
    cat ~/.npmrc
  else
    cp ~/.npmrc-$1 ~/.npmrc && npm cache clean -f
  fi
}

# Do not use know_host file to check connection
alias scpignore="scp -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
alias sshignore="ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"

# Show logged events
function stechuhr {
  month="$1"
  [ "$month" ] || month=$(date +%y-%m)
  cat ~/.stechuhr-"${month}".log
}

function ts {
  if [ -z "${1}" ]; then
    echo "Decode timestamp."
    echo "Usage: ts <timestamp>"
  else
    docker run -it --rm alpine date -ud @${1:0:10}
  fi
}

alias v="vagrant"
alias vr="vagrant resume"
alias vs="vagrant suspend"
